{
  "pw-mod": {
    "prefix": "pwmod",
    "body": [
      "/** @var $1 $$2 */",
      "$$2 = \\$this->wire('modules')->get('$1');",
      "$$2$0"
    ],
    "description": "Import PW Module"
  },
  "pw-module": {
    "prefix": "pwmodule",
    "body": [
      "${0:// info snippet}",
      "class ${1:Classname} extends WireData implements Module, ConfigurableModule {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Classname}',",
      "      'version' => '0.0.1',",
      "      'summary' => '${3:Your module description}',",
      "      'autoload' => ${4:true},",
      "      'singular' => ${5:false},",
      "      'icon' => '${6:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "  }",
      "",
      "  /**",
      "  * Config inputfields",
      "  * @param InputfieldWrapper \\$inputfields",
      "  */",
      "  public function getModuleConfigInputfields(\\$inputfields) {",
      "    return \\$inputfields;",
      "  }",
      "}"
    ],
    "description": "Module Boilerplate"
  },
  "pw-inputfield": {
    "prefix": "pwinputfield",
    "body": [
      "${0:// info snippet}",
      "class Inputfield${1:Foo} extends Inputfield${2:Textarea} {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Foo} Inputfield',",
      "      'version' => '0.0.1',",
      "      'summary' => '${4:Your module description}',",
      "      'icon' => '${5:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  /**",
      "  * Render the Inputfield",
      "  * @return string",
      "  */",
      "  public function ___render() {",
      "    return 'Inputfield RENDER';",
      "  }",
      "",
      "  /**",
      "  * Process the Inputfield's input",
      "  * @return \\$this",
      "  */",
      "  public function ___processInput(\\$input) {",
      "    \\$this->message('process input!');",
      "    return false;",
      "  }",
      "",
      "}"
    ],
    "description": "Fieldtype Module Boilerplate"
  },
  "pw-fieldtype": {
    "prefix": "pwfieldtype",
    "body": [
      "${0:// info snippet}",
      "class ${1:Classname} extends Fieldtype${2:TextLanguage} {",
      "",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '${1:Classname}',",
      "      'version' => '0.0.1',",
      "      'summary' => '${4:Your module description}',",
      "      'icon' => '${5:smile-o}',",
      "      'requires' => [],",
      "      'installs' => [],",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "    parent::init();",
      "  }",
      "",
      "  /** FIELDTYPE METHODS */",
      "",
      "    /**",
      "    * Sanitize value for storage",
      "    * ",
      "    * @param Page \\$page",
      "    * @param Field \\$field",
      "    * @param string \\$value",
      "    * @return string",
      "    */",
      "    public function sanitizeValue(Page \\$page, Field \\$field, \\$value) {",
      "      return \\$value;",
      "    }",
      "",
      "  /** HELPER METHODS */",
      "}"
    ],
    "description": "Fieldtype Module Boilerplate"
  },
  "pw-processmodule": {
    "prefix": "pwprocessmodule",
    "body": [
      "${0:// info snippet}",
      "class Process$1 extends Process {",
      "  public static function getModuleInfo() {",
      "    return [",
      "      'title' => '$2',",
      "      'version' => '${3:0.0.1}',",
      "      'summary' => '$4',",
      "      'icon' => '$5',",
      "      'requires' => [],",
      "      'installs' => [],",
      "      ",
      "      ",
      "      // name of permission required of users to execute this Process (optional)",
      "      'permission' => 'foo',",
      "      // permissions that you want automatically installed/uninstalled with this module (name => description)",
      "      'permissions' => ['foo' => 'May run the foo module'],",
      "      ",
      "      // page that you want created to execute this module",
      "      'page' => [",
      "        'name' => 'helloworld',",
      "        'parent' => 'setup', ",
      "        'title' => 'Hello World'",
      "      ],",
      "",
      "      // optional extra navigation that appears in admin",
      "      // if you change this, you'll need to a Modules > Refresh to see changes",
      "      'nav' => [",
      "        [",
      "          'url' => '', ",
      "          'label' => 'Hello', ",
      "          'icon' => 'smile-o', ",
      "        ],[",
      "          'url' => 'something/', ",
      "          'label' => 'Something', ",
      "          'icon' => 'beer', ",
      "        ],",
      "      ]",
      "    ];",
      "  }",
      "",
      "  public function init() {",
      "    parent::init(); // always remember to call the parent init",
      "  }",
      "",
      "  // pwexecuteFoo",
      "}"
    ],
    "description": "Process Module Boilerplate"
  },
  "pw-executefoo": {
    "prefix": "pwexecuteFoo",
    "body": [
      "/**",
      " * $0",
      " */",
      "public function execute$1() {",
      "  \\$this->headline('$2');",
      "  \\$this->browserTitle('$2');",
      "  /** @var InputfieldForm \\$form */",
      "  \\$form = \\$this->modules->get('InputfieldForm');",
      "  ",
      "  \\$form->add([",
      "    'type' => 'markup',",
      "    'label' => 'foo',",
      "    'value' => 'bar',",
      "  ]);",
      "  ",
      "  return \\$form->render();",
      "}"
    ],
    "description": "ProcessModule Execute Method Boilerplate"
  },
  "pw-moduleconfigclass": {
    "prefix": "pwModuleConfigClass",
    "body": [
      "${0:// info snippet}",
      "class ${1:YourModule}Config extends ModuleConfig {",
      "  public function getDefaults() {",
      "    return [",
      "      'fullname' => '${2:Foo}',",
      "    ];",
      "  }",
      "  public function getInputfields() {",
      "    \\$inputfields = parent::getInputfields();",
      "    ",
      "    \\$f = \\$this->modules->get('InputfieldText');",
      "    \\$f->attr('name', 'fullname');",
      "    \\$f->label = 'Full Name';",
      "    \\$f->required = true;",
      "    \\$inputfields->add(\\$f);",
      "    ",
      "    return \\$inputfields;",
      "  }",
      "}",
      ""
    ],
    "description": "Module Config Class"
  },


  "pw-databasequery": {
    "prefix": "pwSqlQuery",
    "body": [
      "\\$result = \\$this->database->query(\"${1:SELECT * FROM pages LIMIT 5}\");",
      "\\$${2:foo} = \\$result->fetchAll(\\PDO::FETCH_OBJ);",
      "d(\\$${2:foo});$0"
    ],
    "description": "SQL Database Query"
  },
  "pw-WireException": {
    "prefix": "pwex",
    "body": [
      "throw new WireException(\"$1\");",
      "$0"
    ],
    "description": "Throw new WireException"
  },
  "pw-Wire404Exception": {
    "prefix": "pwex404",
    "body": [
      "throw new Wire404Exception(\"$1\");",
      "$0"
    ],
    "description": "Throw new Wire404Exception"
  },



  "pw-hook": {
    "prefix": "pwhook",
    "body": [
      "\\$this->addHook${1:After}('${2:Foo::bar}', \\$this, '${3:HookFooBar}');"
    ],
    "description": "ProcessWire Hook"
  },
  "pw-hookinline": {
    "prefix": "pwHookInline",
    "body": [
      "\\$this->addHook${1:After}('${2:Foo::bar}', function(HookEvent \\$event) {",
      "  ${0}",
      "});"
    ],
    "description": "ProcessWire Hook with Inline Function"
  },

  

  "pw-resetadmin": {
    "prefix": "pwResetAdmin",
    "body": [
      "\\$admin = \\$users->get(41);",
      "\\$admin->setAndSave('pass', '$1');",
      "\\$admin->setAndSave('name', '$2');",
      "die(\"admin url = {\\$pages->get(2)->httpUrl}, admin username = {\\$admin->name}\");",
    ],
    "description": "Reset Admin Password"
  }
}
